can't parse the https schemes. code: url_parser, class: URL, method: init, requests, https://browser.engineering/http.html

def layout(text):
    font = tkinter.font.Font()
    display_list = []
    cursor_x, cursor_y = HSTEP, VSTEP

    for word in text.split():
        w = font.measure(word)
        display_list.append((cursor_x, cursor_y, word))
        cursor_x += w + font.measure(" ")

    for c in text:
        display_list.append((cursor_x, cursor_y, c))
        cursor_x += HSTEP
        if cursor_x + w >= WIDTH - HSTEP:
            cursor_y += font.metrics("linespace")*1.25
            cursor_x = HSTEP
    return display_list


def layout(text):
    font = tkinter.font.Font()
    display_list = []
    cursor_x, cursor_y = HSTEP, VSTEP

    for word in text.split():
        w = font.measure(word)

    for c in text:
        display_list.append((cursor_x, cursor_y, c))
        cursor_x += HSTEP
        if cursor_x + w >= WIDTH - HSTEP:
            cursor_y += font.metrics("linespace") * 1.25
            cursor_x = HSTEP
    return display_list



# working version of layout
def layout(text):
    font = tkinter.font.Font()
    display_list = []
    cursor_x, cursor_y = HSTEP, VSTEP

    # for word in text.split():
    #     w = font.measure(word)
    #     display_list.append((cursor_x, cursor_y, word))
        # cursor_x += w + font.measure(" ")

    for word in text:
        w = font.measure(word)
        display_list.append((cursor_x, cursor_y, word))
        cursor_x += w + font.measure(" ") 
        if cursor_x + w >= WIDTH - HSTEP:
            cursor_y += font.metrics("linespace")*1.25
            cursor_x = HSTEP
    return display_list



            color = node.style["color"]
        weight = node.style["font-weight"]
        style = node.style["font-style"]
        if style == "normal": style = "roman"
        size = int(float(node.style["font-size"][:-2]) * .75)
        font = get_font(size, weight, style)
        w = font.measure(word)
        if self.cursor_x + w >= self.width:
            self.flush()
        self.line.append((self.cursor_x, word, font, color))
        self.cursor_x += w + font.measure(" ") 




    def recurse(self, node):
        if isinstance(node, Text):
            for word in node.text.split():
                self.word(node, word)
        else:
            # self.open_tag(node.tag)
            if node.tag == "br":
                self.flush()
            for child in node.children:
                self.recurse(child)
            # self.close_tag(node.tag)



    def open_tag(self, tag): pass
        # if tag == "i":
        #     self.style = "italic"
        # elif tag == "b":
        #     self.weight = "bold"
        # elif tag == "small":
        #     self.size -= 2
        # elif tag == "big":
        #     self.size += 4
        # elif tag == "br":
        #     self.flush()    

    def close_tag(self, tag): pass
        # if tag == "i":
        #     self.style = "roman"
        # elif tag == "b":
        #     self.weight = "normal"
        # elif tag == "small":
        #     self.size += 2
        # elif tag == "big":
        #     self.size -= 4
        # elif tag == "p":
        #     self.flush()
        #     self.cursor_y += VSTEP



        # if isinstance(self.node, Element) and self.node.tag == "pre":
        #     x2, y2 = self.x + self.width, self.y + self.height
        #     rect = DrawRect(self.x, self.y, x2, y2, "gray")
        #     cmds.append(rect)